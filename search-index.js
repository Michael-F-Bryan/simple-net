var N=null,E="",T="t",U="u",searchIndex={};
var R=["simple_net","usize","tensor","result","try_from","borrow","type_id","typeid","borrow_mut","try_into","to_owned","clone_into","backward","forward","gradient","meansquared","formatter","Activation","MeanSquared"];

searchIndex[R[0]]={"doc":E,"i":[[3,R[17],R[0],"A layer which applies the provided function element-wiseâ€¦",N,N],[3,"Linear",E,"Computes `output = inputs * weights + bias`.",N,N],[3,R[18],E,"A loss function based on the mean squared error.",N,N],[3,"Tensor",E,"A row-major 2D matrix of floats.",N,N],[11,"new",E,E,0,[[[R[1]],[R[1]]],["linear"]]],[11,"new",E,E,1,[[["func"],["derivative"]],["activation"]]],[11,"tanh",E,E,1,[[],["self"]]],[11,"zero",E,E,2,[[[R[1]],[R[1]]],[R[2]]]],[11,"fill",E,E,2,N],[11,"mapped",E,E,2,N],[11,"column",E,E,2,N],[11,"get",E,E,2,[[["self"],[R[1]],[R[1]]],["option",["f32"]]]],[11,"cells",E,E,2,N],[11,"iter",E,E,2,N],[11,"dimensions",E,E,2,N],[11,"transposed",E,E,2,[[["self"]],[R[2]]]],[11,"rows",E,E,2,N],[8,"Layer",E,"The individual components which make up a neural network.",N,N],[10,R[13],E,"Produce the outputs corresponding to these inputs.",3,[[["self"],[R[2]]],[R[2]]]],[10,R[12],E,"Back-propagate the gradient through this layer.",3,[[["self"],[R[2]],[R[2]]],[R[2]]]],[8,"Loss",E,"Loss functions measure how good our predictions are.",N,N],[10,"loss",E,E,4,[[["self"],[R[2]],[R[2]]],["f32"]]],[10,R[14],E,E,4,[[["self"],[R[2]],[R[2]]],[R[2]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[4],E,E,1,[[[U]],[R[3]]]],[11,R[5],E,E,1,[[["self"]],[T]]],[11,R[6],E,E,1,[[["self"]],[R[7]]]],[11,R[8],E,E,1,[[["self"]],[T]]],[11,R[9],E,E,1,[[["self"]],[R[3]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,N],[11,R[4],E,E,0,[[[U]],[R[3]]]],[11,R[5],E,E,0,[[["self"]],[T]]],[11,R[6],E,E,0,[[["self"]],[R[7]]]],[11,R[8],E,E,0,[[["self"]],[T]]],[11,R[9],E,E,0,[[["self"]],[R[3]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[10],E,E,5,[[["self"]],[T]]],[11,R[11],E,E,5,N],[11,R[4],E,E,5,[[[U]],[R[3]]]],[11,R[5],E,E,5,[[["self"]],[T]]],[11,R[6],E,E,5,[[["self"]],[R[7]]]],[11,R[8],E,E,5,[[["self"]],[T]]],[11,R[9],E,E,5,[[["self"]],[R[3]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,N],[11,R[4],E,E,2,[[[U]],[R[3]]]],[11,R[5],E,E,2,[[["self"]],[T]]],[11,R[6],E,E,2,[[["self"]],[R[7]]]],[11,R[8],E,E,2,[[["self"]],[T]]],[11,R[9],E,E,2,[[["self"]],[R[3]]]],[11,R[13],E,E,0,[[["self"],[R[2]]],[R[2]]]],[11,R[12],E,E,0,[[["self"],[R[2]],[R[2]]],[R[2]]]],[11,R[13],E,E,1,[[["self"],[R[2]]],[R[2]]]],[11,R[12],E,E,1,[[["self"],[R[2]],[R[2]]],[R[2]]]],[11,"loss",E,E,5,[[["self"],[R[2]],[R[2]]],["f32"]]],[11,R[14],E,E,5,[[["self"],[R[2]],[R[2]]],[R[2]]]],[11,"eq",E,E,0,[[["self"],["linear"]],["bool"]]],[11,"ne",E,E,0,[[["self"],["linear"]],["bool"]]],[11,"eq",E,E,5,[[["self"],[R[15]]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[2]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[2]]],["bool"]]],[11,"clone",E,E,0,[[["self"]],["linear"]]],[11,"clone",E,E,5,[[["self"]],[R[15]]]],[11,"clone",E,E,2,[[["self"]],[R[2]]]],[11,"add",E,E,2,N],[11,"add",E,E,2,N],[11,"mul",E,E,2,N],[11,"index",E,E,2,N],[11,"index_mut",E,E,2,N],[11,"fmt",E,E,0,[[["self"],[R[16]]],[R[3]]]],[11,"fmt",E,E,5,[[["self"],[R[16]]],[R[3]]]],[11,"fmt",E,E,2,[[["self"],[R[16]]],[R[3]]]]],"p":[[3,"Linear"],[3,R[17]],[3,"Tensor"],[8,"Layer"],[8,"Loss"],[3,R[18]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);